Statistical results

text:
<issue>
Add Cache-Control: private to never_cache decorator.
Description

If a Django user wants to ensure that a resource is not cached.
The user might use never_cache decorator, however, sometimes it doesn't work as he or she expected, which means the resource is cached by CDN.
The reason why is that CDN providers cache the resource. For example, Fastly needs to set Cache-Control: private for HTTP header with the origin response. The document is below.
​https://docs.fastly.com/guides/tutorials/cache-control-tutorial#do-not-cache
Currently Django's never_cache lacks Cache-Control: private, so I suggest to add this header to a response.
Thanks,

</issue>

steps:

1. Identify the location of the `never_cache` decorator in the `django/views/decorators/cache.py` file.
    1.1 The decorator currently uses the `add_never_cache_headers` function to prevent caching.
    1.2 The `add_never_cache_headers` function uses `patch_cache_control` to set caching headers, including `Cache-Control: no-cache, no-store, must-revalidate`.

2. Modify the `never_cache` decorator to add `Cache-Control: private` header to the response.
    2.1 In the `never_cache` decorator, adjust the call to `add_never_cache_headers` by appending the `Cache-Control: private` header.
    2.2 This will ensure that resources are not cached by CDNs, such as Fastly, which look for `Cache-Control: private`.

3. Test the changes.
    3.1 Verify that when `never_cache` is applied, the response includes both `Cache-Control: private` and the existing no-cache headers.

model_patch:

--- a/django/views/decorators/cache.py
+++ b/django/views/decorators/cache.py
@@ -46,6 +46,7 @@
         add_never_cache_headers(response)
+        patch_cache_control(response, private=True)
         return response


gold_patch:
<patch>
diff --git a/django/utils/cache.py b/django/utils/cache.py
--- a/django/utils/cache.py
+++ b/django/utils/cache.py
@@ -250,7 +250,7 @@ def add_never_cache_headers(response):
     Add headers to a response to indicate that a page should never be cached.
     """
     patch_response_headers(response, cache_timeout=-1)
-    patch_cache_control(response, no_cache=True, no_store=True, must_revalidate=True)
+    patch_cache_control(response, no_cache=True, no_store=True, must_revalidate=True, private=True)


 def patch_vary_headers(response, newheaders):

</patch>

--------------------------------------------------
analyze

Prompt blurred ---Implementation details are unclear ---Implementation objects are unclear
) instead of the error code directly in the never_cache decorator, it was actually modified in the add_never_cache_headers function


text:
<issue>
Raise exceptions in mail_admins()/mail_managers() when settings are not in expected formats.
Description

Hi,
First time writing a ticket so I apologize if I do anything improperly here. This issue just arose on a project I've been working on, and it goes as follows:
Our MANAGERS setting was set like so:
MANAGERS = ['one@example.com', 'two@example.com']
And after calling mail_managers, the result was:
smtplib.SMTPRecipientsRefused: {'=?utf-8?q?h?=': (550, b'5.1.1 <=?utf-8?q?h?=>: Recipient address rejected: User unknown in local recipient table'), '=?utf-8?q?u?=': (550, b'5.1.1 <=?utf-8?q?u?=>: Recipient address rejected: User unknown in local recipient table')}
After some investigation it became clear that this setting was in the improper format, but that was only because of ​this StackOverflow post. It would be nice if Django failed early if this setting was detected but improperly set, rather than waiting until the consequences become apparent.
Thank you,
Kevin

</issue>

steps:

1. Review the current implementation of `mail_admins()` and `mail_managers()` methods.
    1.1. Analyze the function signatures and the logic for sending emails to admins and managers.
    1.2. Look into how the `MANAGERS` and `ADMINS` settings are being used in these functions.
    1.3. Observe that both `MANAGERS` and `ADMINS` should be lists or tuples of email addresses.
    1.4. Identify any places in the functions where the email format is assumed to be correct without validation.

2. Add input validation to `mail_admins()` and `mail_managers()` for the `MANAGERS` and `ADMINS` settings.
    2.1. Create a helper function to check if a list or tuple contains valid email addresses.
    2.2. Implement this helper function in both `mail_admins()` and `mail_managers()` to ensure email addresses are correctly formatted.
    2.3. Raise a `ValueError` exception if the `MANAGERS` or `ADMINS` settings are not in the expected format.
    2.4. Ensure that the exception provides a clear message indicating the invalid format for better debugging.

3. Test the changes in a development environment.
    3.1. Create tests to simulate cases where `MANAGERS` or `ADMINS` is incorrectly set, ensuring the exception is properly raised.
    3.2. Test the normal case where the email format is correct, confirming the email functions continue to work as expected.
    3.3. Verify that the exceptions are handled appropriately and fail early in the process.

4. Update documentation to reflect the new validation behavior.
    4.1. Update any relevant sections of the documentation that describe the `MANAGERS` and `ADMINS` settings.
    4.2. Add a note about the new validation that raises exceptions if the email addresses are not correctly formatted.


model_patch:

--- django/core/mail/message.py
+++ django/core/mail/message.py
@@ -233,6 +233,22 @@

 def validate_email_list(email_list):
+    """
+    Validate that the provided email list is a list or tuple of valid email addresses.
+    Raises a ValueError if the format is incorrect.
+    """
+    if not isinstance(email_list, (list, tuple)):
+        raise ValueError("Expected a list or tuple of email addresses.")
+    for email in email_list:
+        if not isinstance(email, str) or '@' not in email:
+            raise ValueError(f"Invalid email address format: {email}")
+    return True

 def mail_admins(subject, message, fail_silently=False, connection=None, html_message=None):
     if settings.ADMINS:
+        validate_email_list(settings.ADMINS)
     send_mail(subject, message, settings.SERVER_EMAIL, [admin[1] for admin in settings.ADMINS], fail_silently, connection, html_message)

 def mail_managers(subject, message, fail_silently=False, connection=None, html_message=None):
     if settings.MANAGERS:
+        validate_email_list(settings.MANAGERS)
     send_mail(subject, message, settings.SERVER_EMAIL, [manager[1] for manager in settings.MANAGERS], fail_silently, connection, html_message)



gold_patch:
<patch>
diff --git a/django/core/mail/__init__.py b/django/core/mail/__init__.py
--- a/django/core/mail/__init__.py
+++ b/django/core/mail/__init__.py
@@ -91,6 +91,8 @@ def mail_admins(subject, message, fail_silently=False, connection=None,
     """Send a message to the admins, as defined by the ADMINS setting."""
     if not settings.ADMINS:
         return
+    if not all(isinstance(a, (list, tuple)) and len(a) == 2 for a in settings.ADMINS):
+        raise ValueError('The ADMINS setting must be a list of 2-tuples.')
     mail = EmailMultiAlternatives(
         '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,
         settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS],
@@ -106,6 +108,8 @@ def mail_managers(subject, message, fail_silently=False, connection=None,
     """Send a message to the managers, as defined by the MANAGERS setting."""
     if not settings.MANAGERS:
         return
+    if not all(isinstance(a, (list, tuple)) and len(a) == 2 for a in settings.MANAGERS):
+        raise ValueError('The MANAGERS setting must be a list of 2-tuples.')
     mail = EmailMultiAlternatives(
         '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,
         settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS],

</patch>

--------------------------------------------------
analyze

Promp fuzzy ----implementation details are unclear ----the data structure is unclear
The correct format for ADMINS and MANAGERS should be (name, email) 2-tuple list.


text:
<issue>
sqlsequencereset should inform that no sequences found.
Description

This just came up on IRC, because someone was expecting sqlsequencereset to provide resets for the auto-increment values for an SQLite table.
Running python manage.py sqlsequencereset <myapp> provides no output if there are no results returned by connection.ops.sequence_reset_sql (see ​here)
So the user has no idea if it failed, succeeded, or they got the invocation wrong (assuming they're not familiar enough with Django to know that invoking it wrong will raise a CommandError).
I'd suggest it should avoid ambiguity, so if len(statements) == 0 it should raise CommandError and say there's nothing to do. Bonus points if it also sniffs the connection backend to know if there is anything it could do, and if there's not, report that sqlsequencereset isn't necessary/available for that backend.

</issue>

steps:

1. Modify the `sqlsequencereset` command to raise a `CommandError` if no sequences are found to reset.
   1.1 Check the length of the `statements` list returned by `connection.ops.sequence_reset_sql`.
   1.2 If the length is 0, raise a `CommandError`.
   1.3 Customize the error message to notify the user that no sequences were found.

2. Add a feature to detect the backend connection type and adjust the error message accordingly.
   2.1 Check the database connection backend.
   2.2 If the backend does not support sequence resetting (e.g., SQLite), include a message indicating that the operation is not supported for this backend.

3. Update documentation to reflect the changes made in handling empty results and unsupported backends.
   3.1 Modify the README or relevant documentation to mention the new error messages.
   3.2 Ensure users know that `sqlsequencereset` will raise an error when there are no sequences or if the backend is unsupported.

model_patch:

--- django/core/management/commands/sqlsequencereset.py
+++ django/core/management/commands/sqlsequencereset.py
@@ -18,7 +18,18 @@
         if not model_list:
             raise CommandError("No models provided.")

         statements = connection.ops.sequence_reset_sql(style, model_list)

-        # Output the SQL to reset sequences.
+        if len(statements) == 0:
+            # Check for unsupported backends (e.g., SQLite)
+            if isinstance(connection.ops, sqlite.Operations):
+                raise CommandError(
+                    "sqlsequencereset is not necessary or supported for SQLite."
+                )
+            else:
+                raise CommandError("No sequences found to reset.")

         for statement in statements:
             self.stdout.write(statement)


gold_patch:
<patch>
diff --git a/django/core/management/commands/sqlflush.py b/django/core/management/commands/sqlflush.py
--- a/django/core/management/commands/sqlflush.py
+++ b/django/core/management/commands/sqlflush.py
@@ -19,4 +19,7 @@ def add_arguments(self, parser):
         )

     def handle(self, **options):
-        return '\n'.join(sql_flush(self.style, connections[options['database']], only_django=True))
+        sql_statements = sql_flush(self.style, connections[options['database']], only_django=True)
+        if not sql_statements and options['verbosity'] >= 1:
+            self.stderr.write('No tables found.')
+        return '\n'.join(sql_statements)
diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py
--- a/django/core/management/commands/sqlmigrate.py
+++ b/django/core/management/commands/sqlmigrate.py
@@ -63,4 +63,6 @@ def handle(self, *args, **options):
         # for it
         plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]
         sql_statements = executor.collect_sql(plan)
+        if not sql_statements and options['verbosity'] >= 1:
+            self.stderr.write('No operations found.')
         return '\n'.join(sql_statements)
diff --git a/django/core/management/commands/sqlsequencereset.py b/django/core/management/commands/sqlsequencereset.py
--- a/django/core/management/commands/sqlsequencereset.py
+++ b/django/core/management/commands/sqlsequencereset.py
@@ -20,4 +20,6 @@ def handle_app_config(self, app_config, **options):
         connection = connections[options['database']]
         models = app_config.get_models(include_auto_created=True)
         statements = connection.ops.sequence_reset_sql(self.style, models)
+        if not statements and options['verbosity'] >= 1:
+            self.stderr.write('No sequences found.')
         return '\n'.join(statements)

</patch>

--------------------------------------------------
analyze

Internal factors---logical flow incomplete--path coverage incomplete
The error code directly throws CommandError, and does not check the level of verbosity; the correct one only outputs "No sequences found." if verbosity >= 1."


text:
<issue>
Add support for SCRIPT_NAME in STATIC_URL and MEDIA_URL
Description

		(last modified by Rostyslav Bryzgunov)

By default, {% static '...' %} tag just appends STATIC_URL in the path. When running on sub-path, using SCRIPT_NAME WSGI param, it results in incorrect static URL - it doesn't prepend SCRIPT_NAME prefix.
This problem can be solved with prepending SCRIPT_NAME to STATIC_URL in settings.py but that doesn't work when SCRIPT_NAME is a dynamic value.
This can be easily added into default Django static tag and django.contrib.staticfiles tag as following:
def render(self, context):
	url = self.url(context)
	# Updating url here with request.META['SCRIPT_NAME']
	if self.varname is None:
		return url
	context[self.varname] = url
		return ''
On more research I found that FileSystemStorage and StaticFilesStorage ignores SCRIPT_NAME as well.
We might have to do a lot of changes but I think it's worth the efforts.

</issue>

steps:

1) In django/templatetags/static.py, locate the handle_simple() method in the PrefixNode class. Enhance it to dynamically prepend SCRIPT_NAME if present, ensuring MEDIA_URL and STATIC_URL both work under a subpath.
2) In django/contrib/staticfiles/storage.py, locate the url() method of StaticFilesStorage. Enhance it to prepend SCRIPT_NAME if present, ensuring that the generated static file URLs include the correct subpath.
3) Keep these two modifications minimal so they can be applied with git apply, and do not alter other logic outside the intended functionality.
4) Verify the patch can be successfully applied and the updated Django instance now respects SCRIPT_NAME for both static and media paths.

model_patch:

--- a/django/templatetags/static.py
+++ b/django/templatetags/static.py
@@
 def handle_simple(cls, name):
     try:
         from django.conf import settings
     except ImportError:
         prefix = ''
     else:
-        prefix = iri_to_uri(getattr(settings, name, ''))
+        prefix = iri_to_uri(getattr(settings, name, ''))
+        from django.urls import get_script_prefix
+        script_prefix = get_script_prefix()
+        if script_prefix and script_prefix != '/':
+            if prefix.startswith('/'):
+                prefix = prefix.lstrip('/')
+            prefix = script_prefix.rstrip('/') + '/' + prefix
     return prefix

--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@
 def url(self, name, force=False):
-    return self._url(self.stored_name, name, force)
+    final_url = self._url(self.stored_name, name, force)
+    from django.urls import get_script_prefix
+    script_prefix = get_script_prefix()
+    if script_prefix and script_prefix != '/':
+        if final_url.startswith('/'):
+            final_url = final_url.lstrip('/')
+        final_url = script_prefix.rstrip('/') + '/' + final_url
+    return final_url


gold_patch:
<patch>
diff --git a/django/conf/__init__.py b/django/conf/__init__.py
--- a/django/conf/__init__.py
+++ b/django/conf/__init__.py
@@ -15,7 +15,8 @@

 import django
 from django.conf import global_settings
-from django.core.exceptions import ImproperlyConfigured
+from django.core.exceptions import ImproperlyConfigured, ValidationError
+from django.core.validators import URLValidator
 from django.utils.deprecation import RemovedInDjango40Warning
 from django.utils.functional import LazyObject, empty

@@ -109,6 +110,26 @@ def configure(self, default_settings=global_settings, **options):
             setattr(holder, name, value)
         self._wrapped = holder

+    @staticmethod
+    def _add_script_prefix(value):
+        """
+        Add SCRIPT_NAME prefix to relative paths.
+
+        Useful when the app is being served at a subpath and manually prefixing
+        subpath to STATIC_URL and MEDIA_URL in settings is inconvenient.
+        """
+        # Don't apply prefix to valid URLs.
+        try:
+            URLValidator()(value)
+            return value
+        except (ValidationError, AttributeError):
+            pass
+        # Don't apply prefix to absolute paths.
+        if value.startswith('/'):
+            return value
+        from django.urls import get_script_prefix
+        return '%s%s' % (get_script_prefix(), value)
+
     @property
     def configured(self):
         """Return True if the settings have already been configured."""
@@ -128,6 +149,14 @@ def PASSWORD_RESET_TIMEOUT_DAYS(self):
             )
         return self.__getattr__('PASSWORD_RESET_TIMEOUT_DAYS')

+    @property
+    def STATIC_URL(self):
+        return self._add_script_prefix(self.__getattr__('STATIC_URL'))
+
+    @property
+    def MEDIA_URL(self):
+        return self._add_script_prefix(self.__getattr__('MEDIA_URL'))
+

 class Settings:
     def __init__(self, settings_module):

</patch>

--------------------------------------------------
analyze

Prompt blurred ---Implementation details are unclear ---Implementation objects are unclear
The problem description does not clearly state that the modification should occur in the Django configuration layer, and only templatetags/static.py is modified, and not in __init__.py.
text:
<issue>
Filter by window expression should raise a descriptive error.
Description

Django has a check that filter does not contain window expressions.
But it is shallow, neither right side of the expression nor combined expressions are checked.
class Employee(models.Model):
	grade = models.IntegerField()
# raises NotSupportedError
Employee.objects.annotate(
	prev_grade=Window(expression=Lag('grade'))
).filter(prev_grade=F('grade'))
# Do not raise anything, fail on database backend once executed.
Employee.objects.annotate(
	prev_grade=Window(expression=Lag('grade'))
).filter(grade=F('prev_grade'))
Employee.objects.annotate(
	prev_grade=Window(expression=Lag('grade')),
	dec_grade=F('prev_grade') - Value(1)
).filter(dec_grade=F('grade'))

</issue>

steps:

1. Identify the existing check_expression_support method inside django/db/backends/base/operations.py where expression validity is evaluated.
2. Remove the placeholder “pass” statement from this method while preserving the NotSupportedError import at the top.
3. Add a recursive helper function to inspect each subexpression and detect window expressions.
4. Invoke the helper to detect any window expression usage.
5. Raise a NotSupportedError with a descriptive message if window expressions are found in filter conditions.

model_patch:

--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -    pass
+    def _contains_window_expr(e):
+        from django.db.models.expressions import Window
+        if isinstance(e, Window):
+            return True
+        children = getattr(e, 'get_source_expressions', lambda: [])()
+        for child in children:
+            if _contains_window_expr(child):
+                return True
+        return False
+
+    if _contains_window_expr(expression):
+        raise NotSupportedError(
+            "Filtering against window expressions is not supported. "
+            "Please remove any references to window expressions in filter()."
+        )


gold_patch:
<patch>
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -500,8 +500,6 @@ def as_sql(self, compiler, connection):
 @deconstructible
 class F(Combinable):
     """An object capable of resolving references to existing query objects."""
-    # Can the expression be used in a WHERE clause?
-    filterable = True

     def __init__(self, name):
         """
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1114,6 +1114,17 @@ def check_related_objects(self, field, value, opts):
                 for v in value:
                     self.check_query_object_type(v, opts, field)

+    def check_filterable(self, expression):
+        """Raise an error if expression cannot be used in a WHERE clause."""
+        if not getattr(expression, 'filterable', 'True'):
+            raise NotSupportedError(
+                expression.__class__.__name__ + ' is disallowed in the filter '
+                'clause.'
+            )
+        if hasattr(expression, 'get_source_expressions'):
+            for expr in expression.get_source_expressions():
+                self.check_filterable(expr)
+
     def build_lookup(self, lookups, lhs, rhs):
         """
         Try to extract transforms and lookup from given lhs.
@@ -1217,11 +1228,7 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
             raise FieldError("Cannot parse keyword query %r" % arg)
         lookups, parts, reffed_expression = self.solve_lookup_type(arg)

-        if not getattr(reffed_expression, 'filterable', True):
-            raise NotSupportedError(
-                reffed_expression.__class__.__name__ + ' is disallowed in '
-                'the filter clause.'
-            )
+        self.check_filterable(reffed_expression)

         if not allow_joins and len(parts) > 1:
             raise FieldError("Joined field references are not permitted in this query")
@@ -1230,6 +1237,8 @@ def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
         value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)
         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}

+        self.check_filterable(value)
+
         clause = self.where_class()
         if reffed_expression:
             condition = self.build_lookup(lookups, reffed_expression, value)

</patch>

--------------------------------------------------
analyze

Prompt fuzzy---missing context information--missing repolevel information
Internal factors---logical flow incomplete--path coverage incomplete
step2 does not take into account the combination window expression, the correct implementation should be recursive check
It is not explicitly stated that this function should be implemented in the query build layer (query.py) rather than in the database operation layer (operations.py)

text:
<issue>
Stop TemplateView automatically passing kwargs into the context
Description

Only TemplateView pushes self.kwargs to the context. ListView does not, I yet have to check others.
This is inconsistency and, I think, it should be fixed.

</issue>

steps:

1. Locate the docstring in TemplateView that references passing keyword arguments from the URLconf to the context and remove that sentence.
2. Update the get method in TemplateView so it does not automatically pass self.kwargs into the context.
3. Verify that removing these references and arguments resolves the inconsistency without affecting other parts of the framework.

model_patch:

--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -
-    """
-    Render a template. Pass keyword arguments from the URLconf to the context.
-    """
+    """
+    Render a template.
+    """
@@ -
-        context = self.get_context_data(**kwargs)
+        context = self.get_context_data()


gold_patch:
<patch>
diff --git a/django/views/generic/base.py b/django/views/generic/base.py
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -1,4 +1,5 @@
 import logging
+import warnings
 from functools import update_wrapper

 from django.core.exceptions import ImproperlyConfigured
@@ -9,6 +10,8 @@
 from django.template.response import TemplateResponse
 from django.urls import reverse
 from django.utils.decorators import classonlymethod
+from django.utils.deprecation import RemovedInDjango40Warning
+from django.utils.functional import SimpleLazyObject

 logger = logging.getLogger('django.request')

@@ -152,14 +155,33 @@ def get_template_names(self):


 class TemplateView(TemplateResponseMixin, ContextMixin, View):
-    """
-    Render a template. Pass keyword arguments from the URLconf to the context.
-    """
+    """Render a template."""
     def get(self, request, *args, **kwargs):
-        context = self.get_context_data(**kwargs)
+        # RemovedInDjango40Warning: when the deprecation ends, replace with:
+        #   context = self.get_context_data()
+        context_kwargs = _wrap_url_kwargs_with_deprecation_warning(kwargs)
+        context = self.get_context_data(**context_kwargs)
         return self.render_to_response(context)


+# RemovedInDjango40Warning
+def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):
+    context_kwargs = {}
+    for key, value in url_kwargs.items():
+        # Bind into function closure.
+        @SimpleLazyObject
+        def access_value(key=key, value=value):
+            warnings.warn(
+                'TemplateView passing URL kwargs to the context is '
+                'deprecated. Reference %s in your template through '
+                'view.kwargs instead.' % key,
+                RemovedInDjango40Warning, stacklevel=2,
+            )
+            return value
+        context_kwargs[key] = access_value
+    return context_kwargs
+
+
 class RedirectView(View):
     """Provide a redirect on any GET request."""
     permanent = False

</patch>

--------------------------------------------------
analyze

Internal factors---the logical flow is incomplete---the absence of exception handling
In the generated error code, the call to get_context_data was directly modified, and **kwargs was deleted. In the correct code, a warning was added to this behavior.
