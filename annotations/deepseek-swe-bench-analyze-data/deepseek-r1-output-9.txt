prompt implementation details are blurred --- Key function description is missing, missing operations on lists and tuples django__django-13682
text:
<issue>
Improve error messages from forgetting to call .as_view() on a CBV
Description

		(last modified by Angus Holder)

We can detect early-on that the user has forgotten to call .as_view() on their CBV when passing it into path(). For:
urlpatterns = [
	path('home', HomeView)
]
The error currently happens only when you first load the route (rather than when constructing the routes), and looks like
Internal Server Error: /
Traceback (most recent call last):
 File "C:\Users\Angus\.virtualenvs\django-WBTbdxDv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
	response = get_response(request)
 File "C:\Users\Angus\.virtualenvs\django-WBTbdxDv\lib\site-packages\django\core\handlers\base.py", line 179, in _get_response
	response = wrapped_callback(request, *callback_args, **callback_kwargs)
TypeError: __init__() takes 1 positional argument but 2 were given
Which is especially hard to work out given that the traceback doesn't even include any of the user's own code, and this is an error that's easy for beginners to run into when first using CBVs.
My PR changes it to fail early, inside the call to django.urls.path(), with a clear error:
URL route 'foo' should pass in 'EmptyCBView.as_view()' instead of 'EmptyCBView'
Pull request: ​https://github.com/django/django/pull/13682

</issue>

steps:

1. **Check View Type in URL Configuration:** When defining a URL pattern using `path()`, check if the provided view is a class that has an `as_view()` method.
2. **Raise Early Error:** If the check passes (i.e., a CBV without `.as_view()`), immediately raise an `ImproperlyConfigured` exception with a descriptive error message indicating the correct usage.
3. **Error Message Details:** The error message includes the route's name (if available) or the route's pattern, along with the class name to guide the user to fix the mistake.

model_patch:

--- a/django/urls/conf.py
+++ b/django/urls/conf.py
@@ -1,6 +1,8 @@
 from functools import partial
 import re
+import inspect

+from django.core.exceptions import ImproperlyConfigured
 from django.urls.resolvers import (
     URLResolver as RegexURLResolver,
     URLPattern as RegexURLPattern,
@@ -16,6 +18,12 @@
     else:
         if kwargs is not None:
             view = partial(view, kwargs=kwargs)
+        if inspect.isclass(view) and hasattr(view, 'as_view') and callable(view.as_view):
+            route_identifier = f"'{name}'" if name else f"with pattern '{route}'"
+            raise ImproperlyConfigured(
+                "URL route %s should pass in '%s.as_view()' instead of '%s'."
+                % (route_identifier, view.__name__, view.__name__)
+            )
         return RegexURLPattern(route, view, kwargs, name)




gold_patch:
<patch>
diff --git a/django/urls/conf.py b/django/urls/conf.py
--- a/django/urls/conf.py
+++ b/django/urls/conf.py
@@ -55,6 +55,8 @@ def include(arg, namespace=None):


 def _path(route, view, kwargs=None, name=None, Pattern=None):
+    from django.views import View
+
     if isinstance(view, (list, tuple)):
         # For include(...) processing.
         pattern = Pattern(route, is_endpoint=False)
@@ -69,6 +71,12 @@ def _path(route, view, kwargs=None, name=None, Pattern=None):
     elif callable(view):
         pattern = Pattern(route, name=name, is_endpoint=True)
         return URLPattern(pattern, view, kwargs, name)
+    elif isinstance(view, View):
+        view_cls_name = view.__class__.__name__
+        raise TypeError(
+            f'view must be a callable, pass {view_cls_name}.as_view(), not '
+            f'{view_cls_name}().'
+        )
     else:
         raise TypeError('view must be a callable or a list/tuple in the case of include().')

diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -345,6 +345,7 @@ def __repr__(self):
     def check(self):
         warnings = self._check_pattern_name()
         warnings.extend(self.pattern.check())
+        warnings.extend(self._check_callback())
         return warnings

     def _check_pattern_name(self):
@@ -361,6 +362,22 @@ def _check_pattern_name(self):
         else:
             return []

+    def _check_callback(self):
+        from django.views import View
+
+        view = self.callback
+        if inspect.isclass(view) and issubclass(view, View):
+            return [Error(
+                'Your URL pattern %s has an invalid view, pass %s.as_view() '
+                'instead of %s.' % (
+                    self.pattern.describe(),
+                    view.__name__,
+                    view.__name__,
+                ),
+                id='urls.E009',
+            )]
+        return []
+
     def resolve(self, path):
         match = self.pattern.match(path)
         if match:

</patch>

--------------------------------------------------
analyze
prompt implementation details are blurred --- Key function description is missing, missing operations on lists and tuples

External factors: Prompt implementation details are blurred, which only shows that error checking is performed in django.urls.path(). There is no specific checking strategy. At the same time, there is also a lack of operations on list and tuple.
Internal factors: The cot logical flow is incomplete. In addition to checking in path(), it should also give a warning in the _check_callback() method to help developers discover errors in advance; cot is inconsistent with propt, and the error type name is different
text:
<issue>
Add a 'durable' flag to transaction.atomic()
Description

As discussed ​on Twitter following ​David Seddon's blog post.
transaction.atomic() guarantees the wrapped database operations is *atomic* - at the end of its wrapped block, operations within that block will all be applied, or all rolled back. In some situations it's also useful to guarantee that the wrapped operations are *durable* - at the end of the wrapped block, all operations have definitely been committed. atomic() doesn't guarantee this at the moment since its use may be wrapped by *another* atomic() higher in the stack, delaying the commit.
David Seddon's technique to guarantee durability is to wrap atomic() to first check if an atomic() is already active for the current connection (in other words, connection.get_autocommit() returns False), and raise an error if so.
On Twitter, Ian Foote suggested adding a durable flag to atomic() to add this behaviour to Django, to which Aymeric Augustin said it sounds like a good idea.

</issue>

steps:

1. **Add the `durable` parameter to the `Atomic` class constructor in `django/db/transaction.py`.**
   - Modify the `__init__` method to accept `durable=False`.
2. **Update the `atomic` function to include the `durable` parameter.**
   - Change the function signature to include `durable=False`.
   - Pass `durable` to `Atomic` when creating instances in both the decorator and context manager cases.
3. **Check for durability in the `Atomic` context manager's `__enter__` method.**
   - Immediately after retrieving the connection, check if `durable` is `True` and if the connection is already in an atomic block.
   - Raise a `TransactionManagementError` if a durable block is nested within another atomic block.

model_patch:

--- a/django/db/transaction.py
+++ b/django/db/transaction.py
@@ -164,13 +164,19 @@
     This is a private API.
     """

-    def __init__(self, using, savepoint):
+    def __init__(self, using, savepoint, durable=False):
         self.using = using
         self.savepoint = savepoint
+        self.durable = durable

     def __enter__(self):
         connection = get_connection(self.using)

+        if self.durable and connection.in_atomic_block:
+            raise TransactionManagementError(
+                "A durable atomic block cannot be nested within another atomic block."
+            )
+
         if not connection.in_atomic_block:
             # Reset state when entering an outermost atomic block.
             connection.commit_on_exit = True
@@ -276,7 +282,7 @@
 # Decorators / context managers #
 #################################

-def atomic(using=None, savepoint=True):
+def atomic(using=None, savepoint=True, durable=False):
     # Bare decorator: @atomic -- although the first argument is called
     # `using`, it's actually the function being decorated.
     if callable(using):
@@ -284,7 +290,7 @@
         return Atomic(DEFAULT_DB_ALIAS, savepoint)(using)
     # Decorator: @atomic(...) or context manager: with atomic(...): ...
     else:
-        return Atomic(using, savepoint)
+        return Atomic(using, savepoint, durable)


 def _non_atomic_requests(view, using):


gold_patch:
<patch>
diff --git a/django/db/transaction.py b/django/db/transaction.py
--- a/django/db/transaction.py
+++ b/django/db/transaction.py
@@ -158,16 +158,30 @@ class Atomic(ContextDecorator):

     Since database connections are thread-local, this is thread-safe.

+    An atomic block can be tagged as durable. In this case, raise a
+    RuntimeError if it's nested within another atomic block. This guarantees
+    that database changes in a durable block are committed to the database when
+    the block exists without error.
+
     This is a private API.
     """
+    # This private flag is provided only to disable the durability checks in
+    # TestCase.
+    _ensure_durability = True

-    def __init__(self, using, savepoint):
+    def __init__(self, using, savepoint, durable):
         self.using = using
         self.savepoint = savepoint
+        self.durable = durable

     def __enter__(self):
         connection = get_connection(self.using)

+        if self.durable and self._ensure_durability and connection.in_atomic_block:
+            raise RuntimeError(
+                'A durable atomic block cannot be nested within another '
+                'atomic block.'
+            )
         if not connection.in_atomic_block:
             # Reset state when entering an outermost atomic block.
             connection.commit_on_exit = True
@@ -282,14 +296,14 @@ def __exit__(self, exc_type, exc_value, traceback):
                     connection.in_atomic_block = False


-def atomic(using=None, savepoint=True):
+def atomic(using=None, savepoint=True, durable=False):
     # Bare decorator: @atomic -- although the first argument is called
     # `using`, it's actually the function being decorated.
     if callable(using):
-        return Atomic(DEFAULT_DB_ALIAS, savepoint)(using)
+        return Atomic(DEFAULT_DB_ALIAS, savepoint, durable)(using)
     # Decorator: @atomic(...) or context manager: with atomic(...): ...
     else:
-        return Atomic(using, savepoint)
+        return Atomic(using, savepoint, durable)


 def _non_atomic_requests(view, using):

</patch>

--------------------------------------------------
analyze
Internal factors: The logical flow is incomplete, connection.in_atomic_block = False is not set when ending the transaction block, which may cause the transaction to not be submitted correctly or rolled back, and an abnormal connection status
text:
<issue>
Add a hook to customize the admin's formsets parameters
Description

New feature that adds a method on InlineModelAdmin for providing initial data for the inline formset. By default there is no implementation, although one could be implemented to use GET parameters like get_changeform_initial_data, but it wouldn't be trivial due to the list nature of formset initial data.

</issue>

steps:

1. **Add `get_formset_initial` Method**: Define a new method `get_formset_initial` in `GenericInlineModelAdmin` to return initial data. This method can be overridden by subclasses to provide custom initial data.
2. **Include Initial Data in Formset Defaults**: Modify the `get_formset` method in `GenericInlineModelAdmin` to include the initial data from `get_formset_initial` in the defaults passed to the formset factory.

model_patch:

--- a/django/contrib/contenttypes/admin.py
+++ b/django/contrib/contenttypes/admin.py
@@ -98,6 +98,7 @@
             'min_num': self.get_min_num(request, obj),
             'max_num': self.get_max_num(request, obj),
             'exclude': exclude,
+            'initial': self.get_formset_initial(request, obj),
             **kwargs,
         }

@@ -107,6 +108,9 @@

         return generic_inlineformset_factory(self.model, **defaults)

+    def get_formset_initial(self, request, obj=None):
+        return []
+

 class GenericStackedInline(GenericInlineModelAdmin):
     template = 'admin/edit_inline/stacked.html'


gold_patch:
<patch>
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1946,6 +1946,20 @@ def history_view(self, request, object_id, extra_context=None):
             "admin/object_history.html"
         ], context)

+    def get_formset_kwargs(self, request, obj, inline, prefix):
+        formset_params = {
+            'instance': obj,
+            'prefix': prefix,
+            'queryset': inline.get_queryset(request),
+        }
+        if request.method == 'POST':
+            formset_params.update({
+                'data': request.POST.copy(),
+                'files': request.FILES,
+                'save_as_new': '_saveasnew' in request.POST
+            })
+        return formset_params
+
     def _create_formsets(self, request, obj, change):
         "Helper function to generate formsets for add/change_view."
         formsets = []
@@ -1959,17 +1973,7 @@ def _create_formsets(self, request, obj, change):
             prefixes[prefix] = prefixes.get(prefix, 0) + 1
             if prefixes[prefix] != 1 or not prefix:
                 prefix = "%s-%s" % (prefix, prefixes[prefix])
-            formset_params = {
-                'instance': obj,
-                'prefix': prefix,
-                'queryset': inline.get_queryset(request),
-            }
-            if request.method == 'POST':
-                formset_params.update({
-                    'data': request.POST.copy(),
-                    'files': request.FILES,
-                    'save_as_new': '_saveasnew' in request.POST
-                })
+            formset_params = self.get_formset_kwargs(request, obj, inline, prefix)
             formset = FormSet(**formset_params)

             def user_deleted_form(request, obj, formset, index):

</patch>

--------------------------------------------------
analyze
External factors---------------------------------------------------------------------------------------------------------------------------
External factors---------------------------------------------------------------------------------------------------------------------------
Internal factors: Cot and propt are inconsistent, propt requires a method to generate an InlineModelAdmin, and cot is directly overridden for GenericStackedInline
text:
<issue>
Add support for fixtures compression in dumpdata
Description

Since loaddata command support compressed fixtures [1] loading, I would propose to add fixtures compression support in dumpdata command.
[1] ​https://docs.djangoproject.com/en/dev/ref/django-admin/#compressed-fixtures

</issue>

steps:

1. **Add Imports**: Import the necessary compression libraries (`gzip`, `bz2`, `lzma`) in `django/core/management/commands/dumpdata.py`, handling cases where `bz2` and `lzma` might not be available.

2. **Update Help Text**: Modify the `--output` option's help text to inform users that compression is supported via file extensions like `.gz`, `.bz2`, etc.

3. **Determine Compression from Filename**: In the `handle` method, split the output filename to check its extension. Based on the extension, select the appropriate compression method.

4. **Open Stream with Compression**: Use the corresponding compression library to open the output file in text write mode. If the required library is missing, raise a `CommandError`.

5. **Error Handling**: Ensure that if a compression format is requested but the necessary module isn't available, the command exits with a clear error message.

6. **Maintain Backward Compatibility**: If no compression extension is found, default to the standard file opening method to maintain existing functionality.

model_patch:

--- a/django/core/management/commands/dumpdata.py
+++ b/django/core/management/commands/dumpdata.py
@@ -1,5 +1,9 @@
 import warnings
+import gzip
+import os

+from django.core.management.base import CommandError
+
 from django.apps import apps
 from django.core import serializers
 from django.core.management.base import BaseCommand, CommandError
@@ -8,6 +12,15 @@
 from django.db import DEFAULT_DB_ALIAS, router

+try:
+    import bz2
+except ImportError:
+    bz2 = None
+try:
+    import lzma
+except ImportError:
+    lzma = None
+

 class ProxyModelWarning(Warning):
     pass
@@ -65,7 +78,8 @@
         )
         parser.add_argument(
             '-o', '--output',
-            help='Specifies file to which the output is written.'
+            help='Specifies file to which the output is written. Use .gz, .bz2, .xz, or .lzma '
+                 'extensions to enable compression.'
         )

     def handle(self, *app_labels, **options):
@@ -185,7 +199,30 @@
             if output and self.stdout.isatty() and options['verbosity'] > 0:
                 progress_output = self.stdout
                 object_count = sum(get_objects(count_only=True))
-            stream = open(output, 'w') if output else None
+            # Determine compression
+            if output:
+                root, ext = os.path.splitext(output)
+                ext = ext.lower()
+                opener = None
+                if ext == '.gz':
+                    opener = gzip.open
+                elif ext == '.bz2':
+                    if bz2 is None:
+                        raise CommandError(
+                            "Compression with bz2 is not supported. Please install the bz2 module."
+                        )
+                    opener = bz2.open
+                elif ext in ('.xz', '.lzma'):
+                    if lzma is None:
+                        raise CommandError(
+                            "Compression with xz/lzma is not supported. Please install the lzma module."
+                        )
+                    opener = lzma.open
+                if opener is not None:
+                    stream = opener(output, 'wt')
+                else:
+                    stream = open(output, 'w')
+            else:
+                stream = None
             try:
                 serializers.serialize(
                     format, get_objects(), indent=indent,


gold_patch:
<patch>
diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py
--- a/django/core/management/commands/dumpdata.py
+++ b/django/core/management/commands/dumpdata.py
@@ -1,3 +1,5 @@
+import gzip
+import os
 import warnings

 from django.apps import apps
@@ -6,6 +8,18 @@
 from django.core.management.utils import parse_apps_and_model_labels
 from django.db import DEFAULT_DB_ALIAS, router

+try:
+    import bz2
+    has_bz2 = True
+except ImportError:
+    has_bz2 = False
+
+try:
+    import lzma
+    has_lzma = True
+except ImportError:
+    has_lzma = False
+

 class ProxyModelWarning(Warning):
     pass
@@ -184,7 +198,36 @@ def get_objects(count_only=False):
             if output and self.stdout.isatty() and options['verbosity'] > 0:
                 progress_output = self.stdout
                 object_count = sum(get_objects(count_only=True))
-            stream = open(output, 'w') if output else None
+            if output:
+                file_root, file_ext = os.path.splitext(output)
+                compression_formats = {
+                    '.bz2': (open, {}, file_root),
+                    '.gz': (gzip.open, {}, output),
+                    '.lzma': (open, {}, file_root),
+                    '.xz': (open, {}, file_root),
+                    '.zip': (open, {}, file_root),
+                }
+                if has_bz2:
+                    compression_formats['.bz2'] = (bz2.open, {}, output)
+                if has_lzma:
+                    compression_formats['.lzma'] = (
+                        lzma.open, {'format': lzma.FORMAT_ALONE}, output
+                    )
+                    compression_formats['.xz'] = (lzma.open, {}, output)
+                try:
+                    open_method, kwargs, file_path = compression_formats[file_ext]
+                except KeyError:
+                    open_method, kwargs, file_path = (open, {}, output)
+                if file_path != output:
+                    file_name = os.path.basename(file_path)
+                    warnings.warn(
+                        f"Unsupported file extension ({file_ext}). "
+                        f"Fixtures saved in '{file_name}'.",
+                        RuntimeWarning,
+                    )
+                stream = open_method(file_path, 'wt', **kwargs)
+            else:
+                stream = None
             try:
                 serializers.serialize(
                     format, get_objects(), indent=indent,

</patch>

--------------------------------------------------
analyze
Internal factors: The exception handling is incomplete, and only the missing module is handled, and the compression format is not supported is not considered.
The logic is incomplete, and the differences between .lzma and .xz are not specified and the processing of not supporting extensions is not supported.


text:
<issue>
Allow postgresql database connections to use postgres services
Description

		(last modified by levihb)

Postgres offers a way to make database connections through the use of services, which are basically equivalent to MySQL's options files.
Server, database, username, etc information is stored by default in ~/.pg_service.conf and takes a very similar format to MySQL cnf files:
[my_alias]
host=10.0.19.10
user=postgres
dbname=postgres
port=5432
And password can be stored in ~/.pgpass under a different format.
I think being able to just add them to the DATABASES config would be useful, similar to how you can add MySQL cnf files. psycopg2 supports it just fine through the service argument/string connect(service='my_alias') connect('service=my_alias').
At the moment it can be added like this:
DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': 'postgres',
		'OPTIONS': {'service': 'my_alias'}
	}
}
Which works, however it involves repeating the database name. I don't think the database name should be repeated twice because it couples the config and the service file together, and makes it harder to just move it between different environments. I think ideally you would just specify the service, either like this:
DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'OPTIONS': {'service': 'my_alias'}
	}
}
Or maybe a better way would be?:
DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'SERVICE': 'my_alias
	}
}
It seems like something that would be super easy to add. I don't mind creating a pull request for it, but would like to know why it hasn't been added, and how it would be recommended to add it.

</issue>

steps:

1. **Check for Service in OPTIONS**: Determine if a 'service' key is present in the database OPTIONS.
2. **Conditional NAME Validation**: Skip the NAME validation checks (presence and length) when a service is used.
3. **Adjust Connection Parameters**: Exclude the 'database' parameter from the connection settings if a service is specified, allowing the service's configuration to take precedence.

model_patch:

--- a/django/db/backends/postgresql/base.py
+++ b/django/db/backends/postgresql/base.py
@@ -152,23 +152,26 @@

     def get_connection_params(self):
         settings_dict = self.settings_dict
+        options = settings_dict['OPTIONS'].copy()
+        using_service = 'service' in options
         # None may be used to connect to the default 'postgres' db
-        if settings_dict['NAME'] == '':
-            raise ImproperlyConfigured(
-                "settings.DATABASES is improperly configured. "
-                "Please supply the NAME value.")
-        if len(settings_dict['NAME'] or '') > self.ops.max_name_length():
-            raise ImproperlyConfigured(
-                "The database name '%s' (%d characters) is longer than "
-                "PostgreSQL's limit of %d characters. Supply a shorter NAME "
-                "in settings.DATABASES." % (
-                    settings_dict['NAME'],
-                    len(settings_dict['NAME']),
-                    self.ops.max_name_length(),
+        if not using_service:
+            if settings_dict['NAME'] == '':
+                raise ImproperlyConfigured(
+                    "settings.DATABASES is improperly configured. "
+                    "Please supply the NAME value.")
+            if len(settings_dict['NAME'] or '') > self.ops.max_name_length():
+                raise ImproperlyConfigured(
+                    "The database name '%s' (%d characters) is longer than "
+                    "PostgreSQL's limit of %d characters. Supply a shorter NAME "
+                    "in settings.DATABASES." % (
+                        settings_dict['NAME'],
+                        len(settings_dict['NAME']),
+                        self.ops.max_name_length(),
+                    )
                 )
-            )
         conn_params = {
-            'database': settings_dict['NAME'] or 'postgres',
-            **settings_dict['OPTIONS'],
+            'database': settings_dict['NAME'] or 'postgres' if not using_service else None,
+            **options,
         }
         conn_params.pop('isolation_level', None)
         if settings_dict['USER']:


gold_patch:
<patch>
diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py
--- a/django/db/backends/postgresql/base.py
+++ b/django/db/backends/postgresql/base.py
@@ -152,10 +152,14 @@ class DatabaseWrapper(BaseDatabaseWrapper):
     def get_connection_params(self):
         settings_dict = self.settings_dict
         # None may be used to connect to the default 'postgres' db
-        if settings_dict['NAME'] == '':
+        if (
+            settings_dict['NAME'] == '' and
+            not settings_dict.get('OPTIONS', {}).get('service')
+        ):
             raise ImproperlyConfigured(
                 "settings.DATABASES is improperly configured. "
-                "Please supply the NAME value.")
+                "Please supply the NAME or OPTIONS['service'] value."
+            )
         if len(settings_dict['NAME'] or '') > self.ops.max_name_length():
             raise ImproperlyConfigured(
                 "The database name '%s' (%d characters) is longer than "
@@ -166,10 +170,19 @@ def get_connection_params(self):
                     self.ops.max_name_length(),
                 )
             )
-        conn_params = {
-            'database': settings_dict['NAME'] or 'postgres',
-            **settings_dict['OPTIONS'],
-        }
+        conn_params = {}
+        if settings_dict['NAME']:
+            conn_params = {
+                'database': settings_dict['NAME'],
+                **settings_dict['OPTIONS'],
+            }
+        elif settings_dict['NAME'] is None:
+            # Connect to the default 'postgres' db.
+            settings_dict.get('OPTIONS', {}).pop('service', None)
+            conn_params = {'database': 'postgres', **settings_dict['OPTIONS']}
+        else:
+            conn_params = {**settings_dict['OPTIONS']}
+
         conn_params.pop('isolation_level', None)
         if settings_dict['USER']:
             conn_params['user'] = settings_dict['USER']
diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -16,6 +16,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):
         dbname = settings_dict.get('NAME') or 'postgres'
         user = settings_dict.get('USER')
         passwd = settings_dict.get('PASSWORD')
+        service = options.get('service')
         sslmode = options.get('sslmode')
         sslrootcert = options.get('sslrootcert')
         sslcert = options.get('sslcert')
@@ -33,6 +34,8 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):
         env = {}
         if passwd:
             env['PGPASSWORD'] = str(passwd)
+        if service:
+            env['PGSERVICE'] = str(service)
         if sslmode:
             env['PGSSLMODE'] = str(sslmode)
         if sslrootcert:

</patch>

--------------------------------------------------
analyze
Cot Logical Flow Incomplete --- Path Incomplete Override
Internal factors: lack of exception handling, unprocessed scenarios such as NAME=None, insufficient processing of boundary conditions
text:
<issue>
Add --skip-checks option to the runserver command.
Description

Rationale:
It would be consistent with other management commands performing system checks
It would help people like me who would rather have checks enabled exclusively in CI/CD than wait 15-20 seconds for each project reload during development
Related StackOverflow question:
​https://stackoverflow.com/questions/41438593/skip-system-checks-on-django-server-in-debug-mode-in-pycharm/41725866

</issue>

steps:

1. **Add the --skip-checks option to the runserver command's arguments**: Modify the `add_arguments` method in the `runserver` command to include a new `--skip-checks` flag. This allows users to include the option when running the server.

2. **Modify the inner_run method to conditionally skip checks**: In the `inner_run` method of the `runserver` command, wrap the existing system checks and migration checks in a conditional that checks if the `--skip-checks` option was provided. If it was, skip executing these checks.

model_patch:

--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -50,6 +50,10 @@
             '--noreload', action='store_false', dest='use_reloader',
             help='Tells Django to NOT use the auto-reloader.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )

     def execute(self, *args, **options):
         if options['no_color']:
@@ -108,9 +112,10 @@
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'

-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        self.check_migrations()
+        if not options.get('skip_checks'):
+            self.stdout.write("Performing system checks...\n\n")
+            self.check(display_num_errors=True)
+            self.check_migrations()
         now = datetime.now().strftime('%B %d, %Y - %X')
         self.stdout.write(now)
         self.stdout.write((


gold_patch:
<patch>
diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -51,6 +51,10 @@ def add_arguments(self, parser):
             '--noreload', action='store_false', dest='use_reloader',
             help='Tells Django to NOT use the auto-reloader.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )

     def execute(self, *args, **options):
         if options['no_color']:
@@ -114,8 +118,9 @@ def inner_run(self, *args, **options):
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'

-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
+        if not options['skip_checks']:
+            self.stdout.write('Performing system checks...\n\n')
+            self.check(display_num_errors=True)
         # Need to check migrations here, so can't use the
         # requires_migrations_check attribute.
         self.check_migrations()

</patch>

--------------------------------------------------
analyze
CoT and Prompt are not exactly consistent: CoT uses "skip checks" and is not limited to "system checks", which is biased from Prompt's intention.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
External factors: The context factor is missing. The description only mentions that the system checks should be skipped. There is no detailed description of which checks should be skipped, resulting in inconsistent two code segments; the lack of repo-level information, and EvaluationError error is thrown.
